import smartsheet
import time

# ==========================
# CONFIG
# ==========================
ACCESS_TOKEN = "J52VB2wiLYzdMX7HWciJvsSGQm0zv1mDWKwNd"
SHEET_ID_1 = 5402253021106052   # Sheet1 ID
SHEET_ID_2 = 2896749489246084   # Sheet2 ID

smartsheet_client = smartsheet.Smartsheet(ACCESS_TOKEN)
smartsheet_client.errors_as_exceptions(True)


# ===============================================================
# Helper: Get column map
# ===============================================================
def get_col_map(sheet_id):
    sheet = smartsheet_client.Sheets.get_sheet(sheet_id)
    return {col.title: col.id for col in sheet.columns}, sheet


# ===============================================================
# Step 1: Move values C‚ÜíA, D‚ÜíB and clear C,D
# ===============================================================
def step1_move_and_clear(sheet_id):
    col_map, sheet = get_col_map(sheet_id)
    src_tgt_pairs = [
        ("Data CAL Date", "‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö Data CAL Date"),
        ("Data Calibration Due Date", "‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö Data Calibration Due Date")
    ]
    rows_to_update = []

    for r in sheet.rows:
        new_row = smartsheet.models.Row()
        new_row.id = r.id
        
        for src, tgt in src_tgt_pairs:
            src_id = col_map.get(src)
            tgt_id = col_map.get(tgt)
            if not src_id or not tgt_id:
                continue

            val = next((c.value for c in r.cells if c.column_id == src_id), None)
            if val is not None:

                cell_target = smartsheet.models.Cell()
                cell_target.column_id = tgt_id
                cell_target.value = val
                cell_target.strict = False
                new_row.cells.append(cell_target)
                
                cell_clear = smartsheet.models.Cell()
                cell_clear.column_id = src_id
                cell_clear.value = ""
                cell_clear.strict = False
                new_row.cells.append(cell_clear)

        if new_row.cells:
            rows_to_update.append(new_row)

    if rows_to_update:
        smartsheet_client.Sheets.update_rows(sheet_id, rows_to_update)
        print("‚úÖ Step1: ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• C‚ÜíA, D‚ÜíB ‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ C,D ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    else:
        print("‚ö†Ô∏è Step1: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≤‡∏¢")


# ===============================================================
# Step 2: Copy rows with value in Column F ‚Üí Sheet2
# ===============================================================
def step2_copy_rows(sheet_id_src, sheet_id_dst):
    col_map, sheet = get_col_map(sheet_id_src)
    f_col_id = col_map.get("Calibration Due Date")
    if not f_col_id:
        print("‚ùå Step2: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Calibration Due Date")
        return
    row_ids = [r.id for r in sheet.rows if any(
        c.column_id == f_col_id and c.value for c in r.cells)]
    if not row_ids:
        print("‚ö†Ô∏è Step2: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Column F")
        return
    smartsheet_client.Sheets.copy_rows(
        sheet_id_src,
        smartsheet.models.CopyOrMoveRowDirective({
            'row_ids': row_ids,
            'to': {'sheet_id': sheet_id_dst}
        })
    )
    print(f"‚úÖ Step2: ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å {len(row_ids)} ‡πÅ‡∏ñ‡∏ß‡∏à‡∏≤‡∏Å Sheet1 ‚Üí Sheet2 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")


import time

# ===============================================================
# Step 3: Clear DataCal, CalDue; move SentCal‚ÜíDataCal, CalDue‚ÜíDataCalDue
# ===============================================================
def step3_clean_and_move(sheet_id):
    """
    Step 3:
    - ‡∏¢‡πâ‡∏≤‡∏¢ Sent Cal Date ‚Üí Data Cal Date
    - ‡∏¢‡πâ‡∏≤‡∏¢ Calibration Due Date ‚Üí Data Calibration Due Date
    - ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö Data Cal Date / ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö Data Calibration Due Date / Sent Cal Date / Calibration Due Date
    """
    col_map_raw, sheet = get_col_map(sheet_id)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á mapping ‡πÅ‡∏ö‡∏ö case-insensitive
    col_map = {title.strip(): cid for title, cid in col_map_raw.items()}
    lmap = {title.strip().lower(): cid for title, cid in col_map_raw.items()}

    print("Step3 - column titles on sheet:", list(col_map.keys()))

    def find_id_exact_or_substrings(names, substrings=None):
        for name in names:
            cid = lmap.get(name.strip().lower())
            if cid:
                return cid
        if substrings:
            for title_lower, cid in lmap.items():
                if all(s.lower() in title_lower for s in substrings):
                    return cid
        return None

    # üß≠ ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏•‡∏±‡∏Å
    src_sent = find_id_exact_or_substrings(["Sent Cal Date"])
    src_due = find_id_exact_or_substrings(["Calibration Due Date"])
    tgt_data_cal = find_id_exact_or_substrings(["Data Cal Date"])
    tgt_data_due = find_id_exact_or_substrings(["Data Calibration Due Date"])
    clear_cols = [
        find_id_exact_or_substrings(["‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö Data Cal Date"]),
        find_id_exact_or_substrings(["‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö Data Calibration Due Date"]),
        src_sent,
        src_due
    ]

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    for name, cid in {
        "Sent Cal Date": src_sent,
        "Calibration Due Date": src_due,
        "Data Cal Date": tgt_data_cal,
        "Data Calibration Due Date": tgt_data_due
    }.items():
        if not cid:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '{name}'")

    rows_to_update = []

    # üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    for r in sheet.rows:
        cell_dict = {}
        new_row = smartsheet.models.Row()
        new_row.id = r.id

        # ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢ Sent Cal Date ‚Üí Data Cal Date
        if src_sent and tgt_data_cal:
            val = next((c.value for c in r.cells if c.column_id == src_sent), None)
            if val not in (None, "", " "):
                cell = smartsheet.models.Cell()
                cell.column_id = tgt_data_cal
                cell.value = val
                cell.strict = False
                cell_dict[cell.column_id] = cell

        # ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢ Calibration Due Date ‚Üí Data Calibration Due Date
        if src_due and tgt_data_due:
            val = next((c.value for c in r.cells if c.column_id == src_due), None)
            if val not in (None, "", " "):
                cell = smartsheet.models.Cell()
                cell.column_id = tgt_data_due
                cell.value = val
                cell.strict = False
                cell_dict[cell.column_id] = cell

        # üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        for col_id in [cid for cid in clear_cols if cid]:
            cell_clear = smartsheet.models.Cell()
            cell_clear.column_id = col_id
            cell_clear.value = ""
            cell_clear.strict = False
            cell_dict[cell_clear.column_id] = cell_clear

        if cell_dict:
            new_row.cells = list(cell_dict.values())
            rows_to_update.append(new_row)

    # üíæ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ñ‡∏ß
    if rows_to_update:
        smartsheet_client.Sheets.update_rows(sheet_id, rows_to_update)
        print("‚úÖ Step3: ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    else:
        print("‚ö†Ô∏è Step3: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πâ‡∏≤‡∏á")

    print("‚è≥ ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° Step ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ...")
    time.sleep(5)


# ===============================================================
# Step 4: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Status 'Complete' ‚Üí 'The Calibration is still valid'
# ‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô "Data Calibration Due Date" ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Sheet1
# ===============================================================
def step4_status_and_move(source_sheet_id, target_sheet_id):
    print("üü¶ Step4: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Status ‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Sheet1...")

    # ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á Sheet
    src_sheet = smartsheet_client.Sheets.get_sheet(source_sheet_id).to_dict()
    tgt_sheet = smartsheet_client.Sheets.get_sheet(target_sheet_id).to_dict()

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á mapping ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‚Üí columnId
    src_col_map = {c['title'].strip(): c['id'] for c in src_sheet['columns']}
    tgt_col_map = {c['title'].strip(): c['id'] for c in tgt_sheet['columns']}

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏´‡∏°
    if "Data Calibration Due Date" not in src_col_map:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Data Calibration Due Date ‡πÉ‡∏ô‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á")
        return
    if "Status" not in tgt_col_map:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Status ‡πÉ‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á")
        return

    data_due_col_id = src_col_map["Data Calibration Due Date"]
    status_col_id = tgt_col_map["Status"]

    # ‚úÖ fallback mapping (‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô)
    fallback_map = {
        "Number": ["Number", "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç", "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà"],
        "Status": ["Status", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]
    }

    rows_to_copy = []

    for r in src_sheet['rows']:
        # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Data Calibration Due Date
        data_due_val = next(
            (c.get('value') for c in r['cells'] if c.get('columnId') == data_due_col_id),
            None
        )
        if not data_due_val:
            continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ

        new_row = smartsheet.models.Row()
        used_columns = set()

        for c in r['cells']:
            col_title = next((k for k, v in src_col_map.items() if v == c.get('columnId')), None)
            if not col_title:
                continue

            # ‚úÖ mapping ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡πÉ‡∏ä‡πâ fallback ‡∏î‡πâ‡∏ß‡∏¢)
            tgt_col_id = tgt_col_map.get(col_title)
            if not tgt_col_id:
                # ‡∏•‡∏≠‡∏á‡∏´‡∏≤ fallback mapping ‡πÄ‡∏ä‡πà‡∏ô ‚ÄúNumber‚Äù ‚Üí ‚Äú‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‚Äù
                for main_name, aliases in fallback_map.items():
                    if col_title in aliases and main_name in tgt_col_map:
                        tgt_col_id = tgt_col_map[main_name]
                        break

            if not tgt_col_id or tgt_col_id in used_columns:
                continue

            val = c.get('value')
            if val not in (None, "", " "):
                cell = smartsheet.models.Cell()
                cell.column_id = tgt_col_id
                cell.value = val
                cell.strict = False
                new_row.cells.append(cell)
                used_columns.add(tgt_col_id)

        # ‚úÖ ‡πÅ‡∏Å‡πâ‡∏Ñ‡πà‡∏≤ Status ‡πÄ‡∏õ‡πá‡∏ô "The Calibration is still valid"
        found = False
        for cell in new_row.cells:
            if cell.column_id == status_col_id:
                if str(cell.value).strip().lower() == "complete":
                    cell.value = "The Calibration is still valid"
                found = True
                break

        if not found:
            status_cell = smartsheet.models.Cell()
            status_cell.column_id = status_col_id
            status_cell.value = "The Calibration is still valid"
            status_cell.strict = False
            new_row.cells.append(status_cell)

        if new_row.cells:
            rows_to_copy.append(new_row)

    # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Sheet1
    if rows_to_copy:
        smartsheet_client.Sheets.add_rows(target_sheet_id, rows_to_copy)
        print(f"‚úÖ Step4: ‡∏¢‡πâ‡∏≤‡∏¢ {len(rows_to_copy)} ‡πÅ‡∏ñ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Sheet1 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏£‡∏ß‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Number ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ Status ‡πÅ‡∏•‡πâ‡∏ß)")
    else:
        print("‚ö†Ô∏è Step4: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Data Calibration Due Date ‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≤‡∏¢")

    # ‚úÖ ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° Step ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    print("‚è≥ ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° Step ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ...")
    time.sleep(5)


import time


# ===============================================================
# Step 5: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Sent Cal Date / Calibration Due Date ‡πÉ‡∏ô Sheet1
# ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Sheet2
# ===============================================================
def step5_clear_data(sheet1_id, sheet2_id):
    print("üü¶ Step5: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Sheet1 ‡πÅ‡∏•‡∏∞ Sheet2...")

    # ‚úÖ --- ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Sent Cal Date / Calibration Due Date (Sheet1) ---
    col_map, sheet = get_col_map(sheet1_id)
    cols_to_clear = []

    for col_name in ["Sent CAL Date", "Calibration Due Date"]:
        if col_name in col_map:
            cols_to_clear.append(col_map[col_name])
        else:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '{col_name}' ‡πÉ‡∏ô Sheet1")

    if cols_to_clear:
        rows_to_update = []
        for r in sheet.rows:
            new_row = smartsheet.models.Row()
            new_row.id = r.id
            for c_id in cols_to_clear:
                cell = smartsheet.models.Cell()
                cell.column_id = c_id
                cell.value = ""
                cell.strict = False
                new_row.cells.append(cell)
            rows_to_update.append(new_row)

        if rows_to_update:
            smartsheet_client.Sheets.update_rows(sheet1_id, rows_to_update)
            print(f"‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {', '.join([c for c in ['Sent CAL Date', 'Calibration Due Date'] if c in col_map])} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á‡πÉ‡∏ô Sheet1")
    else:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á‡πÉ‡∏ô Sheet1")

    # ‚úÖ --- ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Sheet2 ---
    try:
        sheet2 = smartsheet_client.Sheets.get_sheet(sheet2_id).to_dict()
        if not sheet2['rows']:
            print("‚ö†Ô∏è Sheet2 ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡πâ‡∏•‡∏ö")
        else:
            row_ids = [r['id'] for r in sheet2['rows']]
            smartsheet_client.Sheets.delete_rows(sheet2_id, row_ids)
            print(f"‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({len(row_ids)} ‡πÅ‡∏ñ‡∏ß) ‡πÉ‡∏ô Sheet2 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Sheet2: {e}")

    # ‚úÖ --- ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° Step ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ---
    print("‚è≥ ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° Step ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ...")
    time.sleep(5)

    print("‚úÖ Step5: ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Sheet1 ‡πÅ‡∏•‡∏∞ Sheet2")


# ===============================================================
# MAIN
# ===============================================================
if __name__ == "__main__":
    print("\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô Workflow 5 ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô...")

    # Step 1
    step1_move_and_clear(SHEET_ID_1)
    time.sleep(5)

    # Step 2
    step2_copy_rows(SHEET_ID_1, SHEET_ID_2)
    time.sleep(5)

    # Step 3
    step3_clean_and_move(SHEET_ID_2)
    time.sleep(5)

    # Step 4
    step4_status_and_move(SHEET_ID_2, SHEET_ID_1)
    time.sleep(5)

    # Step 5
    step5_clear_data(SHEET_ID_1, SHEET_ID_2)
    time.sleep(5)

    print("\nüéâ ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß!")
